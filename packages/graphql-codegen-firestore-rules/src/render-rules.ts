import {
  FirestoreRulesAstKind,
  FirestoreRulesFunctionAst,
  FirestoreRulesMatchAllowKind,
  FirestoreRulesMatchAst,
  FirestoreRulesRootAst,
  FirestoreRulesServiceAst,
} from './rules-ast'

export interface RenderRulesConfig {
  indent?: string
}

export const renderRules = (
  rules: FirestoreRulesRootAst,
  config: RenderRulesConfig,
): string => {
  const { indent = '  ' } = config

  return (
    [
      `// Generated by GraphQL Firestore Rules`,
      `rules_version = \"${rules.version}\"`,
      renderService(rules.service, { indent }),
    ].join('\n') + '\n'
  )
}

const renderService = (
  service: FirestoreRulesServiceAst,
  config: Required<RenderRulesConfig>,
): string => {
  return [
    `service cloud.firestore {`,
    ...service.children
      .flatMap((child) => renderMatch(child, config).split('\n'))
      .map((v) => `${config.indent}${v}`),
    `}`,
  ].join('\n')
}

const matchIndex = {
  [FirestoreRulesMatchAllowKind.GET]: 1,
  [FirestoreRulesMatchAllowKind.LIST]: 2,
  [FirestoreRulesMatchAllowKind.CREATE]: 3,
  [FirestoreRulesMatchAllowKind.UPDATE]: 4,
  [FirestoreRulesMatchAllowKind.DELETE]: 5,
}

const renderMatch = (
  match: FirestoreRulesMatchAst,
  config: Required<RenderRulesConfig>,
): string => {
  return [
    `match ${match.target} {`,
    ...match.children
      .flatMap((child) =>
        (child.kind === FirestoreRulesAstKind.MATCH
          ? renderMatch(child, config)
          : renderFunction(child, config)
        ).split('\n'),
      )
      .map((v) => `${config.indent}${v}`),

    ...Object.entries(match.allow || {})
      .filter(
        ([, value]) =>
          typeof value !== 'undefined' &&
          (!Array.isArray(value) || value.length > 0),
      )
      .map<[FirestoreRulesMatchAllowKind, string | string[]]>(
        ([kind, value]) => [kind as FirestoreRulesMatchAllowKind, value],
      )
      .sort(([a], [b]) => {
        return matchIndex[a] - matchIndex[b]
      })
      .flatMap(([key, value]) => {
        if (typeof value === 'string') {
          return `${config.indent}allow ${key}: if ${value}`
        } else if (value.length === 0) {
          return []
        } else {
          return [
            `${config.indent}allow ${key}: if (`,
            ...value.map((v) => `${config.indent}${config.indent}${v}`),
            `${config.indent})`,
          ]
        }
      }),
    `}`,
  ].join('\n')
}

const renderFunction = (
  functionAst: FirestoreRulesFunctionAst,
  config: Required<RenderRulesConfig>,
): string => {
  const statements =
    typeof functionAst.statement === 'string'
      ? [`${config.indent}return ${functionAst.statement}`]
      : [
          `${config.indent}return (`,
          ...functionAst.statement.map(
            (v) => `${config.indent}${config.indent}${v}`,
          ),
          `${config.indent})`,
        ]
  return [
    `function ${functionAst.name}(${functionAst.args.join(', ')}) {`,
    ...statements,
    `}`,
  ].join('\n')
}
